# Github CI/CD for guardata

name: Github-Actions

on: [push]

env:
  pythonVersion: '3.6'
  winfspVersion: '1.7.20172'
  postgresqlVersion: '12'

jobs:

#################################################################################
# Step 0: Quality Control

  s0_qc:
    name: Quality Control
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ env.pythonVersion }}
    - run: echo 'PYTHONVER=$(python -VV)' >> $GITHUB_ENV
    - uses: actions/cache@v2
      id: cache-pre-commit
      with:
        path: '**/pre-commit-cache'
        key: precommit-{{env.PYTHONVER}}
        restore-keys: precommit-
    - run: |
        set -eux
        sudo apt-get update
        python3 --version
        pip3 install pre-commit
      name: 'Bootstrap'
    - run: |
        set -eux
        # Run all pre-commit hooks on all files
        pre-commit run --all-files --show-diff-on-failure
      name: 'Pre-commit hooks check'


#################################################################################
# Step 1: Binary wheel build

  s1_build_wheel:
    name: Build wheel
    needs:
      - s0_qc
    timeout-minutes: 8
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ env.pythonVersion }}
    - run: |
        set -eux
        sudo apt-get update
        python3 --version
        pip3 install -r pre-requirements.txt
      name: 'Bootstrap'
    - run: |
        set -eux
        python setup.py bdist_wheel
      name: 'Build Wheel'
    - uses: actions/upload-artifact@v2
      with:
          name: wheel
          path: |
              dist/


#################################################################################
# Step 2.a: Tests on Linux

  s2_linux_test:
    name: Linux tests
    needs:
      - s1_build_wheel
    timeout-minutes: 40
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}
      - uses: actions/download-artifact@v2
        with:
          name: wheel
      - run: |
          set -eux
          sudo apt-get update
          python --version
          pip3 install -r pre-requirements.txt
          sudo apt-get install postgresql-${{ env.postgresqlVersion }}
          psql --version
        name: 'Bootstrap'
      - run: |
          set -eux
          # Remove the guardata folder (force to use the wheel)
          rm -rf guardata
          # Install the guardata wheel with all dependencies
          WHEEL=$(ls ./guardata-*.whl)
          pip3 install $WHEEL[all]
          # Check dependency compatibility
          pip3 check guardata[all]
        name: 'Install'
      - run: |
          set -eux
          python3 -m pytest --log-level=DEBUG \
            --durations=10 -v \
            tests --runmountpoint --runslow \
            -n auto --max-worker-restart=0 -x
        name: 'Tests memory'
      - run: |
          set -eux
          python3 -m pytest --log-level=DEBUG \
            --durations=10 -v \
            tests/backend tests/test_cli.py --postgresql --runslow \
            -n auto --max-worker-restart=0 -x
        name: 'Tests postgresql'


#################################################################################
# Step 2.b: Tests on Windows

  s2_windows_test:
    name: Windows tests
    needs:
      - s1_build_wheel
    timeout-minutes: 40
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}
      - uses: actions/download-artifact@v2
        with:
          name: wheel
      - run: |
          python.exe --version
          pip install -r pre-requirements.txt
          choco install -y --no-progress winfsp --pre --version=${{ env.winfspVersion }}
          # Install winfsp-test and put it in PATH
          mkdir winfsp-test
          curl -L https://github.com/billziss-gh/winfsp/releases/download/v1.7/winfsp-tests-1.7.20172.zip -o winfsp-test/winfsp-tests.zip
          unzip winfsp-test/winfsp-tests.zip -d winfsp-test
          echo "${Env:GITHUB_WORKSPACE}/winfsp-test"
          echo "${Env:GITHUB_WORKSPACE}/winfsp-test" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        name: 'Bootstrap'
      - run: |
          # Remove the guardata folder from the source to force use of the wheel
          Remove-Item -Recurse -Force guardata
          # Install the guardata wheel with all dependencies
          $WHEEL=Get-Childitem -Path .  -Filter "guardata-*.whl" -Name
          pip install "$WHEEL[all]"
          # Check dependency compatibility
          pip check guardata[all]
          # Check winfsp-tests availability
          python.exe -c "import winfspy.tests.winfsp_tests"
        name: 'Install'
      - run: |
          python.exe -m pytest --log-level=DEBUG --durations=10 -v tests -n auto --max-worker-restart=0 -x
        name: 'Tests fast'
      - run: |
          python.exe -m pytest --log-level=DEBUG --durations=10 -v tests --runmountpoint --runslow -m mountpoint -x
        name: 'Tests mountpoint'
      - run: |
          python.exe -m pytest --log-level=DEBUG --durations=10 -v tests --runmountpoint --runslow --rungui -m gui -x -n 1
        name: 'Tests GUI'
      - run: |
          python.exe -m pytest --log-level=DEBUG --durations=10 -v tests --runslow -m slow -n auto --max-worker-restart=0 -x
        name: 'Tests slow'


#################################################################################
# Step 2.c: Tests on MacOSX

  s2_mac_test:
    name: MacOSX tests
    needs:
      - s1_build_wheel
    timeout-minutes: 40
    runs-on: macOS-10.15
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}
      - uses: actions/download-artifact@v2
        with:
          name: wheel
      - run: |
          set -eux
          python3 --version
          # Install osxfuse
          brew install --cask macfuse
          # Build and install guardata
          python3 setup.py bdist_wheel
          python3 -m pip install ".[all]"
          # Check dependency compatibility
          python3 -m pip check guardata[all]
        name: 'Install'
      - run: |
          set -eux
          python3 -m pytest --log-level=DEBUG \
            --durations=10 -v \
            tests/test_cli.py tests/client/gui/test_login.py tests/client/gui/test_main_window.py \
            --runmountpoint --rungui -n 1 --max-worker-restart=0 -x
        name: 'Tests CLI/GUI ease'


#################################################################################
# Step 3.a: Build on MacOSX
#  Build for MacOSX is done on Github,
#  as GitLab is not offering Mac shared runners.
#  Requires code sign and notarization on the app bundle output.

  s3_mac_build:
    name: MacOSX build
    needs:
      - s2_mac_test
    timeout-minutes: 15
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}
      - run: |
          set -eux
          cd packaging/MacOSX
          ./build_mac.sh
          tar -jcvf guardata-macapp.tar.bz2 dist/guardata.app
        name: 'Building'
      - uses: actions/upload-artifact@v2
        with:
            name: macpkg
            path: |
                packaging/MacOSX/guardata-macapp.tar.bz2

#################################################################################
# Step 3.b: Build on Windows
#  Requires code signing of the package output.

  s3_win_build:
    name: Win build
    needs:
      - s2_windows_test
    timeout-minutes: 15
    runs-on: windows-latest
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7.9
      - uses: actions/checkout@v2
      - run: |
          rm -R -Force guardata/test_utils
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          choco install -y --no-progress nsis   --version=3.06.1
          RefreshEnv
          $pytver = "__version__ = `"${CI_COMMIT_TAG}`"`n"
          Out-File -FilePath guardata\_version.py -InputObject $pytver -Encoding ascii
          cd packaging/win32/
          curl -o winfsp-1.7.20172.msi https://github.com/billziss-gh/winfsp/releases/download/v1.7/winfsp-1.7.20172.msi
          .\Invoke-Environment.ps1 '"C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvars64.bat"'
          $env:PATH+=";C:\Program Files (x86)\NSIS"
          python.exe freeze_guardata.py ..\\..
          makensis.exe installer.nsi
        name: 'Building'
      - uses: actions/upload-artifact@v2
        with:
            name: winpkg
            path: |
                packaging/win32/build/guardata*-setup.exe

#################################################################################
# Step 3.c: Build Linux Snap

  s3_snap_build:
    name: Snap build
    needs:
      - s2_linux_test
    timeout-minutes: 15
    runs-on: ubuntu-latest
    container: kyrofa/github-snap-builder:core18
    steps:
      - uses: actions/checkout@v3
      - run: |
          sudo apt-get -y update
          cp -R packaging/snap snapbuild
          cat CHANGELOG.rst >> README.rst
          cd snapbuild
          mkdir src
          cp -R ../guardata src
          cp ../setup.py src
          cp ../README.rst src
          sed -i "s#^\\(__version__ = \\).*\$#\\1'$CI_COMMIT_TAG'#" src/guardata/_version.py
          sed -i "s/__GUARDATA_VERSION__/$CI_COMMIT_TAG/" snap/snapcraft.yaml
          snapcraft --destructive-mode
      - uses: actions/upload-artifact@v2
        with:
            name: snappkg
            path: |
                snapbuild/guardata*.snap
