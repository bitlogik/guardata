# Azure Github CI/CD for guardata

trigger:
  branches:
    include:
    - '*'

variables:
  python.version: '3.6'
  postgresql.version: '10'
  winfsp.version: '1.7.20172'
  pytest.base_args: |
    --log-level=DEBUG \
    --durations=10 -v \
  debug.stress_flaky_tests: 0

jobs:

#################################################################################
# Step 0: Quality Control

- job: 's0_qc'
  displayName: 'Quality Control'
  timeoutInMinutes: 4
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    PRE_COMMIT_HOME: $(Pipeline.Workspace)/pre-commit-cache
  steps:
  - checkout: self
    submodules: true
  - script: echo "##vso[task.setvariable variable=PY]$(python -VV)"
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
  - task: CacheBeta@0
    inputs:
      key: pre-commit | .pre-commit-config.yaml | "$(PY)"
      path: $(PRE_COMMIT_HOME)
  - bash: |
      set -eux
      sudo apt-get update
      python3 --version
      pip3 install --use-feature=2020-resolver pre-commit
    displayName: 'Bootstrap'
  - bash: |
      set -eux
      # Run all pre-commit hooks on all files
      pre-commit run --all-files --show-diff-on-failure
    displayName: 'Pre-commit hooks check'


#################################################################################
# Step 1: Binary wheel build

- job: 's1_build_wheel'
  displayName: 'Build wheel'
  dependsOn:
    - s0_qc
  timeoutInMinutes: 8
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
  - bash: |
      set -eux
      sudo apt-get update
      python3 --version
      pip3 install --use-feature=2020-resolver -r pre-requirements.txt
    displayName: 'Bootstrap'
  - bash: |
      set -eux
      python setup.py bdist_wheel
    displayName: 'Build Wheel'
  - publish: dist/
    artifact: wheel


#################################################################################
# Step 2.a: Tests on Linux

- job: 's2_linux_test'
  displayName: 'Linux tests'
  dependsOn:
    - s1_build_wheel
  timeoutInMinutes: 40
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    PGINSTALLATION: '/usr/lib/postgresql/$(postgresql.version)/bin'
  steps:
  - checkout: self
    submodules: true
  - download: current
    artifact: wheel
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
  - bash: |
      set -eux
      sudo apt-get update
      python --version
      pip3 install --use-feature=2020-resolver -r pre-requirements.txt
      sudo apt-get install postgresql-$(postgresql.version)
      psql --version
    displayName: 'Bootstrap'
  - bash: |
      set -eux
      # Remove the guardata folder (force to use the wheel)
      rm -rf guardata
      # Install the guardata wheel with all dependencies
      WHEEL=$(ls $(Pipeline.Workspace)/wheel/guardata-*.whl)
      pip3 install --use-feature=2020-resolver $WHEEL[all]
      # Check dependency compatibility
      pip3 check guardata[all]
    displayName: 'Install'
  - bash: |
      set -eux
      python3 -m pytest $(pytest.base_args) \
        tests --runmountpoint --runslow \
        -n auto --max-worker-restart=0 -x
    displayName: 'Tests memory'
  - bash: |
      set -eux
      python3 -m pytest $(pytest.base_args) \
        tests/backend tests/test_cli.py --postgresql --runslow \
        -n auto --max-worker-restart=0 -x
    displayName: 'Tests postgresql'


#################################################################################
# Step 2.b: Tests on Windows

- job: 's2_windows_test'
  displayName: 'Windows tests'
  dependsOn:
    - s1_build_wheel
  timeoutInMinutes: 40
  pool:
    vmImage: 'windows-latest'
  variables:
    PGINSTALLATION: C:\\Program Files\\PostgreSQL\\$(postgresql.version)\\bin
  steps:
  - checkout: self
    submodules: true
  - download: current
    artifact: wheel
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - bash: |
      set -eux
      python.exe --version
      pip install --use-feature=2020-resolver -r pre-requirements.txt
      choco install -y --no-progress winfsp --pre --version=$(winfsp.version)
      # Install winfsp-test and put it in PATH
      mkdir winfsp-test
      curl -L https://github.com/billziss-gh/winfsp/releases/download/v1.7/winfsp-tests-1.7.20172.zip -o winfsp-test/winfsp-tests.zip
      unzip winfsp-test/winfsp-tests.zip -d winfsp-test
      echo "##vso[task.prependpath]$(Build.SourcesDirectory)\\winfsp-test"
    displayName: 'Bootstrap'
  - bash: |
      set -eux
      # Remove the guardata folder from the source to force use of the wheel
      rm -rf guardata
      # Install the guardata wheel with all dependencies
      WHEEL_DIRECTORY=`python -c 'print(r"$(Pipeline.Workspace)/wheel".replace("\\\\", "/"))'`
      WHEEL=$(ls $WHEEL_DIRECTORY/guardata-*.whl)
      echo $WHEEL
      pip install --use-feature=2020-resolver $WHEEL[all]
      # Check dependency compatibility
      pip check guardata[all]
      # Check winfsp-tests availability
      python.exe -c "import winfspy.tests.winfsp_tests"
    displayName: 'Install'
  - bash: |
      set -eux
      python.exe -m pytest $(pytest.base_args) \
        tests -n auto --max-worker-restart=0 -x
    displayName: 'Tests fast'
  - bash: |
      set -eux
      python.exe -m pytest $(pytest.base_args) \
        tests --runmountpoint --runslow -m mountpoint -x
    displayName: 'Tests mountpoint'
  - bash: |
      set -eux
      python.exe -m pytest $(pytest.base_args) \
        tests --runmountpoint --runslow --rungui -m gui -x -n 1
    displayName: 'Tests GUI'
  - bash: |
      set -eux
      python.exe -m pytest $(pytest.base_args) \
        tests --runslow -m slow \
        -n auto --max-worker-restart=0 -x
    displayName: 'Tests slow'


#################################################################################
# Step 2.c: Tests on MacOSX

- job: 's2_mac_test'
  displayName: 'MacOSX tests'
  dependsOn:
    - s1_build_wheel
  timeoutInMinutes: 40
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
  - download: current
    artifact: wheel
  - bash: |
      set -eux
      python3 --version
      # Install osxfuse
      brew cask install osxfuse
      # Build and install guardata
      python3 setup.py bdist_wheel
      python3 -m pip install --use-feature=2020-resolver ".[all]"
      # Check dependency compatibility
      python3 -m pip check guardata[all]
    displayName: 'Install'
  - bash: |
      set -eux
      python3 -m pytest $(pytest.base_args) \
        tests/test_cli.py tests/client/gui/test_login.py tests/client/gui/test_main_window.py \
        --runmountpoint --rungui -n 1 --max-worker-restart=0 -x
    displayName: 'Tests CLI/GUI ease'
  # - bash: | Skipped : all pass but freeze at the end
      # set -eux
      # python3 -m pytest $(pytest.base_args) \
        # tests --ignore=tests/backend --runslow --runmountpoint \
        # -n auto --max-worker-restart=0 -x
    # displayName: 'Tests client'
  # - bash: | Skipped : need to finish wait_until patch
      # set -eux
      # python3 -m pytest $(pytest.base_args) \
        # tests --runslow --runmountpoint --rungui -m gui -x -n 1
    # displayName: 'Tests GUI'
  # - bash: | Skipped
      # set -eux
      # python3 -m pytest $(pytest.base_args) \
        # tests --ignore=tests/backend --runslow -m slow \
        # -n auto --max-worker-restart=0 -x
    # displayName: 'Tests slow'

#################################################################################
# Step 3: Build on MacOSX
#  Build for MacOSX is done on Azure,
#  as GitLab is not offering Mac shared runners.
#  Requires code sign and notarization on the app bundle output.

- job: 's3_mac_build'
  displayName: 'MacOSX build'
  dependsOn:
    - s2_mac_test
  timeoutInMinutes: 15
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
  - bash: |
      set -eux
      cd packaging/MacOSX
      ./build_mac.sh
      tar -jcvf guardata-macapp.tar.bz2 dist/guardata.app
    displayName: 'Building'
  - publish: packaging/MacOSX/guardata-macapp.tar.bz2
