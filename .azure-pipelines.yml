# Azure Github CI/CD for guardata

trigger:
  branches:
    include:
    - '*'

variables:
  python.version: '3.6'
  postgresql.version: '10'
  winfsp.version: '1.7.20172'
  pytest.base_args: |
    --log-level=DEBUG \
    --durations=10 -v \
  debug.stress_flaky_tests: 0

jobs:

#################################################################################
# Step 1: Binary wheel build

- job: 's1_build_wheel'
  displayName: 'Build wheel'
  timeoutInMinutes: 8
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
  - bash: |
      set -eux
      sudo apt-get update
      python3 --version
      pip3 install -r pre-requirements.txt
    displayName: 'Bootstrap'
  - bash: |
      set -eux
      python setup.py bdist_wheel
    displayName: 'Build Wheel'
  - publish: dist/
    artifact: wheel


#################################################################################
# Step 2.c: Tests on MacOSX

- job: 's2_mac_test'
  displayName: 'MacOSX tests'
  dependsOn:
    - s1_build_wheel
  timeoutInMinutes: 40
  pool:
    vmImage: 'macos-10.15'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
  - download: current
    artifact: wheel
  - bash: |
      set -eux
      python3 --version
      psql --version
      brew cask install osxfuse
      # Remove the guardata folder (force to use the wheel)
      rm -rf guardata
      # Install the guardata wheel with all dependencies
      WHEEL=$(ls $(Pipeline.Workspace)/wheel/guardata-*.whl)
      pip3 install $WHEEL[all]
      # Check dependency compatibility
      pip3 check guardata[all]
    displayName: 'Install'
  - bash: |
      set -eux
      python3 -m pytest $(pytest.base_args) \
        tests --ignore=tests/backend --runslow --runmountpoint \
        -n auto --max-worker-restart=0 -x
    displayName: 'Tests client'
  - bash: |
      set -eux
      python3 -m pytest $(pytest.base_args) \
        tests --runslow --runmountpoint --rungui -m gui -x -n 1
    displayName: 'Tests GUI'
  - bash: |
      set -eux
      python3 -m pytest $(pytest.base_args) \
        tests --ignore=tests/backend --runslow -m slow \
        -n auto --max-worker-restart=0 -x
    displayName: 'Tests slow'
  - bash: |
      set -eux
      python3 -m pytest $(pytest.base_args) \
        tests/backend tests/test_cli.py --postgresql --runslow \
        -n auto --max-worker-restart=0 -x
    displayName: 'Tests postgresql'


